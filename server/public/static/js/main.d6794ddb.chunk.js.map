{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","path","App","useState","output","setOutput","hauntCooldown","roamCooldown","config","setConfig","console","log","useEffect","on","msg","newConfig","newLog","disconnect","Container","style","marginTop","Form","FormGroup","row","Label","for","Col","md","Input","type","id","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAKMA,EAAS,IAAIC,IAAG,CAAEC,KAAM,YA4DfC,MA1Df,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,CAAEG,cAAe,EAAGC,aAAc,IAF1D,mBAENC,EAFM,KAEEC,EAFF,KAgCb,OA7BAC,QAAQC,IAAI,qBAUZC,qBAAU,WAcR,OAbAb,EAAOc,GAAG,QAAQ,SAACC,GACjBJ,QAAQC,IAAI,QACZD,QAAQC,IAAIG,MAEdf,EAAOc,GAAG,UAAU,SAACC,GAdI,IAACC,EAexBL,QAAQC,IAAI,UAfYI,EAgBLD,EAfrBJ,QAAQC,IAAI,iBAAkBI,GAC9BN,EAAUM,MAgBVhB,EAAOc,GAAG,WAAW,SAACC,GAdN,IAACE,EAefN,QAAQC,IAAI,WAfGK,EAgBLF,EAfZJ,QAAQC,IAAI,cAAeP,EAAQY,GACnCX,GAAU,SAACD,GAAD,OAAYA,EAAS,KAAOY,QAiB/B,kBAAMjB,EAAOkB,gBACnB,IAKD,6BACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,QAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,IAAI,kBAAX,kBACA,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,GAAG,iBAAiBC,MAAOvB,EAAOF,kBAGzD,kBAACgB,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,iBACA,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,GAAG,gBAAgBC,MAAOvB,EAAOD,kBAI1D,oCAEDH,MC9Ca4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.d6794ddb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport io from 'socket.io-client'\nimport { Input, FormGroup, Label, Col, Container, Form } from 'reactstrap';\n\nconst socket = new io({ path: '/socket' })\n\nfunction App() {\n  const [output, setOutput] = useState('')\n  const [config, setConfig] = useState({ hauntCooldown: 0, roamCooldown: 0 })\n  console.log(\"WHAT IS HAPPENING\")\n  const handleConfigChange = (newConfig) => {\n    console.log(\"CONFIG CHANGED\", newConfig)\n    setConfig(newConfig)\n  }\n  const appendLog = (newLog) => {\n    console.log(\"LOG CHANGED\", output, newLog)\n    setOutput((output) => output + '\\n' + newLog)\n  }\n\n  useEffect(() => {\n    socket.on('test', (msg) => {\n      console.log(\"TEST\")\n      console.log(msg)\n    })\n    socket.on('config', (msg) => {\n      console.log(\"CONFIG\")\n      handleConfigChange(msg)\n    })\n    socket.on('message', (msg) => {\n      console.log(\"MESSAGE\")\n      appendLog(msg)\n    })\n\n    return () => socket.disconnect()\n  }, [])\n\n\n\n  return (\n    <div>\n      <Container style={{ marginTop: \"1em\" }}>\n        <Form>\n          <FormGroup row>\n            <Label for=\"haunt-cooldown\">Haunt Cooldown</Label>\n            <Col md=\"3\" >\n              <Input type=\"text\" id=\"haunt-cooldown\" value={config.hauntCooldown} />\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Label for=\"roam-cooldown\">Roam Cooldown</Label>\n            <Col md=\"3\" >\n              <Input type=\"text\" id=\"roam-cooldown\" value={config.roamCooldown} />\n            </Col>\n          </FormGroup>\n        </Form>\n        <pre>\n          test\n      {output}\n        </pre>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}